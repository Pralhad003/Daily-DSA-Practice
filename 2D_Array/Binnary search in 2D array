#include<iostream>
#include<vector>
using namespace std;

class Solution {
public:
// Time Complexcity is O(N+logM)
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int n = matrix.size();
        int m = matrix[0].size();
        for(int i=0;i<n;i++){
            if(matrix[i][0]<=target &&target<=matrix[i][m-1])
            {
        int mid ,start = 0, end = n  - 1;

        while (start <= end) {
            mid = start + (end - start) / 2;
         
            if (matrix[i][mid] == target)
                return true;
            else if (matrix[i][mid] < target)
                start = mid + 1;
            else
                end = mid - 1;
        }
            }
        }
        return false;
    
    }
};
// Time Complexcity is O(logN*M)
 bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int n = matrix.size();
        int m = matrix[0].size();
        int mid, row, col, start = 0, end = n * m - 1;

        while (start <= end) {
            mid = start + (end - start) / 2;
            row = mid / m;
            col = mid % m;

            if (matrix[row][col] == target)
                return true;
            else if (matrix[row][col] < target)
                start = mid + 1;
            else
                end = mid - 1;
        }

        return false;
    }
};

int main() {
    Solution ob;

    int n, m;
    cout << "Enter the number of rows and columns in the matrix: ";
    cin >> n >> m;

    vector<vector<int>> matrix(n, vector<int>(m));

    cout << "Enter the elements of the matrix:" << endl;
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            cin >> matrix[i][j];
        }
    }

    int target;
    cout << "Enter the target: ";
    cin >> target;

    bool result = ob.searchMatrix(matrix, target);

    if (result)
        cout << "Target found in the matrix." << endl;
    else
        cout << "Target not found in the matrix." << endl;

    return 0;
}
